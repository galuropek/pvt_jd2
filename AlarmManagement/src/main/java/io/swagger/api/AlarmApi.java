/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.1-SNAPSHOT).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Alarm;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2019-01-06T21:03:59.754+03:00")

@Api(value = "alarm", description = "the alarm API")
public interface AlarmApi {

    @ApiOperation(value = "alarmClearbyID", nickname = "alarmClearbyID", notes = "", response = Alarm.class, tags={ "alarm", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Success alarm", response = Alarm.class) })
    @RequestMapping(value = "/alarm/{alarmId}/clear",
        produces = { "application/json" }, 
//        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Alarm> alarmClearbyID(@ApiParam(value = "",required=true) @PathVariable("alarmId") String alarmId,@ApiParam(value = ""  )  @Valid @RequestBody Alarm alarm);


    @ApiOperation(value = "alarmCreate", nickname = "alarmCreate", notes = "", response = Alarm.class, tags={ "alarm", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Alarm", response = Alarm.class) })
    @RequestMapping(value = "/alarm",
        produces = { "application/json" }, 
//        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Alarm> alarmCreate(@ApiParam(value = "" ,required=true )  @Valid @RequestBody Alarm alarm);


    @ApiOperation(value = "alarmDelete", nickname = "alarmDelete", notes = "", tags={ "alarm", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Success") })
    @RequestMapping(value = "/alarm/{alarmId}",
        produces = { "application/json" }, 
//        consumes = { "application/json" },
        method = RequestMethod.DELETE)
    ResponseEntity<Void> alarmDelete(@ApiParam(value = "",required=true) @PathVariable("alarmId") String alarmId);


    @ApiOperation(value = "alarmGet", nickname = "alarmGet", notes = "", response = Alarm.class, tags={ "alarm", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "alarm", response = Alarm.class) })
    @RequestMapping(value = "/alarm/{alarmId}",
        produces = { "application/json" }, 
//        consumes = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<Alarm> alarmGet(@ApiParam(value = "",required=true) @PathVariable("alarmId") String alarmId,@ApiParam(value = "") @Valid @RequestParam(value = "fields", required = false) String fields);


    @ApiOperation(value = "alarmPatch", nickname = "alarmPatch", notes = "", response = Alarm.class, tags={ "alarm", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Success alarm", response = Alarm.class) })
    @RequestMapping(value = "/alarm/{alarmId}",
        produces = { "application/json" }, 
//        consumes = { "application/json" },
        method = RequestMethod.PATCH)
    ResponseEntity<Alarm> alarmPatch(@ApiParam(value = "",required=true) @PathVariable("alarmId") String alarmId,@ApiParam(value = "" ,required=true )  @Valid @RequestBody Alarm alarm);


    @ApiOperation(value = "alarmsFind", nickname = "alarmsFind", notes = "", response = Alarm.class, responseContainer = "List", tags={ "alarms", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "List of Alarms", response = Alarm.class, responseContainer = "List") })
    @RequestMapping(value = "/alarm",
        produces = { "application/json" }, 
//        consumes = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<List<Alarm>> alarmsFind(@ApiParam(value = "") @Valid @RequestParam(value = "fields", required = false) String fields);

}
