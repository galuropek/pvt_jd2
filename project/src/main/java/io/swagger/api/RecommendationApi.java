/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.1-SNAPSHOT).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Error;
import org.threeten.bp.OffsetDateTime;
import io.swagger.model.Recommendation;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2018-12-22T18:33:01.088+03:00")

@Api(value = "recommendation", description = "the recommendation API")
public interface RecommendationApi {

    @ApiOperation(value = "List or find 'Recommendation' objects", nickname = "listRecommendation", notes = "", response = Recommendation.class, responseContainer = "List", tags={ "recommendation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok", response = Recommendation.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Bad Request", response = Error.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = Error.class) })
    @RequestMapping(value = "/recommendation",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<List<Recommendation>> listRecommendation(@ApiParam(value = "Comma separated properties to display in response") @Valid @RequestParam(value = "fields", required = false) String fields,@ApiParam(value = "For filtering: It indicates the base type of REST resource.") @Valid @RequestParam(value = "@baseType", required = false) String baseType,@ApiParam(value = "For filtering: It provides the link to the schema describing REST resource") @Valid @RequestParam(value = "@schemaLocation", required = false) String schemaLocation,@ApiParam(value = "For filtering: It indicates the class type of the catalog.") @Valid @RequestParam(value = "@type", required = false) String type,@ApiParam(value = "For filtering: Name of recommendation") @Valid @RequestParam(value = "name", required = false) String name,@ApiParam(value = "For filtering: Type of recommendation. The basic type is : 'AD': it means the recommendation is the advertisement for display 'OFFER': it means the recommended content is the offer entry page. By clicking it, the user can be forwarded to the details of the offering") @Valid @RequestParam(value = "type", required = false) String type2,@ApiParam(value = "For filtering: An instant of time, ending at the TimePeriod.") @Valid @RequestParam(value = "validFor.endDateTime", required = false) OffsetDateTime validForEndDateTime,@ApiParam(value = "For filtering: An instant of time, starting at the TimePeriod") @Valid @RequestParam(value = "validFor.startDateTime", required = false) OffsetDateTime validForStartDateTime,@ApiParam(value = "For filtering: Name of the geographic location.") @Valid @RequestParam(value = "location.name", required = false) String locationName,@ApiParam(value = "For filtering: Type of the geographic location.") @Valid @RequestParam(value = "location.type", required = false) String locationType,@ApiParam(value = "For filtering: The rank of the list of recommended offering.") @Valid @RequestParam(value = "item.priority", required = false) Integer itemPriority,@ApiParam(value = "For filtering: Name of the related party.") @Valid @RequestParam(value = "party.name", required = false) String partyName,@ApiParam(value = "For filtering: Role of the related party.") @Valid @RequestParam(value = "party.role", required = false) String partyRole,@ApiParam(value = "For filtering: Name of the category.") @Valid @RequestParam(value = "category.name", required = false) String categoryName,@ApiParam(value = "For filtering: Name of the channel.") @Valid @RequestParam(value = "channel.name", required = false) String channelName);


    @ApiOperation(value = "Retrieves a 'Recommendation' by Id", nickname = "retrieveRecommendation", notes = "", response = Recommendation.class, responseContainer = "List", tags={ "recommendation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok", response = Recommendation.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Bad Request", response = Error.class),
        @ApiResponse(code = 404, message = "Not Found", response = Error.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = Error.class) })
    @RequestMapping(value = "/recommendation/{id}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<List<Recommendation>> retrieveRecommendation(@ApiParam(value = "Identifier of the Recommendation",required=true) @PathVariable("id") String id);

}
