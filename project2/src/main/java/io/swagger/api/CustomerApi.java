/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.1-SNAPSHOT).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Customer;
import io.swagger.model.CustomerCreate;
import io.swagger.model.CustomerUpdate;
import io.swagger.model.Error;
import org.threeten.bp.OffsetDateTime;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2018-12-22T19:45:02.882+03:00")

@Api(value = "customer", description = "the customer API")
public interface CustomerApi {

    @ApiOperation(value = "Creates a 'Customer'", nickname = "createCustomer", notes = "", response = Customer.class, tags={ "customer", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Created", response = Customer.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Error.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = Error.class) })
    @RequestMapping(value = "/customer",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Customer> createCustomer(@ApiParam(value = "The Customer to be created" ,required=true )  @Valid @RequestBody CustomerCreate customer);


    @ApiOperation(value = "Deletes a 'Customer' by Id", nickname = "deleteCustomer", notes = "", tags={ "customer", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Deleted"),
        @ApiResponse(code = 400, message = "Bad Request", response = Error.class),
        @ApiResponse(code = 404, message = "Not Found", response = Error.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = Error.class) })
    @RequestMapping(value = "/customer/{id}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteCustomer(@ApiParam(value = "Identifier of the Customer",required=true) @PathVariable("id") String id);


    @ApiOperation(value = "List or find 'Customer' objects", nickname = "listCustomer", notes = "", response = Customer.class, responseContainer = "List", tags={ "customer", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok", response = Customer.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Bad Request", response = Error.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = Error.class) })
    @RequestMapping(value = "/customer",
        produces = { "application/json" }, 
//        consumes = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<List<Customer>> listCustomer(@ApiParam(value = "Comma separated properties to display in response") @Valid @RequestParam(value = "fields", required = false) String fields,@ApiParam(value = "For filtering: A word, term, or phrase by which the PartyRole is known and distinguished from other PartyRoles.") @Valid @RequestParam(value = "name", required = false) String name,@ApiParam(value = "For filtering: Used to track the lifecycle status of the party role.") @Valid @RequestParam(value = "status", required = false) String status,@ApiParam(value = "For filtering: A string providing an explanation on the value of the status lifecycle. For instance if the status is Rejected, statusReason will provide the reason for rejection.") @Valid @RequestParam(value = "statusReason", required = false) String statusReason,@ApiParam(value = "For filtering: An instant of time, ending at the TimePeriod.") @Valid @RequestParam(value = "validFor.endDateTime", required = false) OffsetDateTime validForEndDateTime,@ApiParam(value = "For filtering: An instant of time, starting at the TimePeriod") @Valid @RequestParam(value = "validFor.startDateTime", required = false) OffsetDateTime validForStartDateTime,@ApiParam(value = "For filtering: Name of the referred party (such as a partner or any other party role)") @Valid @RequestParam(value = "engagedParty.name", required = false) String engagedPartyName,@ApiParam(value = "For filtering: The name of the role type. It uniquely identifies the role type within the partnership type.") @Valid @RequestParam(value = "type.name", required = false) String typeName,@ApiParam(value = "For filtering: Reference url of the partnership type containing the role type") @Valid @RequestParam(value = "type.partnershipHref", required = false) String typePartnershipHref,@ApiParam(value = "For filtering: The identifier of the partnership type containing the role type") @Valid @RequestParam(value = "type.partnershipId", required = false) String typePartnershipId,@ApiParam(value = "For filtering: The name of the partnership type defining this role type") @Valid @RequestParam(value = "type.partnershipName", required = false) String typePartnershipName,@ApiParam(value = "For filtering: Name of the account") @Valid @RequestParam(value = "account.name", required = false) String accountName,@ApiParam(value = "For filtering: Name of the payment mean") @Valid @RequestParam(value = "paymentMethod.name", required = false) String paymentMethodName,@ApiParam(value = "For filtering: If true, indicates that is the preferred contact medium") @Valid @RequestParam(value = "contactMedium.preferred", required = false) Boolean contactMediumPreferred,@ApiParam(value = "For filtering: Type of the contact medium, such as: email address, telephone number, postal address") @Valid @RequestParam(value = "contactMedium.type", required = false) String contactMediumType,@ApiParam(value = "For filtering: Name of the characteristic") @Valid @RequestParam(value = "characteristic.name", required = false) String characteristicName,@ApiParam(value = "For filtering: Value of the characteristic") @Valid @RequestParam(value = "characteristic.value", required = false) String characteristicValue,@ApiParam(value = "For filtering: The date the profile was established") @Valid @RequestParam(value = "creditProfile.creditProfileDate", required = false) OffsetDateTime creditProfileCreditProfileDate,@ApiParam(value = "For filtering: This is an integer whose value is used to rate the risk") @Valid @RequestParam(value = "creditProfile.creditRiskRating", required = false) Integer creditProfileCreditRiskRating,@ApiParam(value = "For filtering: A measure of a person's or an organization's creditworthiness calculated on the basis of a combination of factors such as their income and credit history.") @Valid @RequestParam(value = "creditProfile.creditScore", required = false) Integer creditProfileCreditScore,@ApiParam(value = "For filtering: Name of the agreement") @Valid @RequestParam(value = "agreement.name", required = false) String agreementName,@ApiParam(value = "For filtering: Name of the related party") @Valid @RequestParam(value = "relatedParty.name", required = false) String relatedPartyName,@ApiParam(value = "For filtering: Role of the related party.") @Valid @RequestParam(value = "relatedParty.role", required = false) String relatedPartyRole);


    @ApiOperation(value = "Retrieves a 'Customer' by Id", nickname = "retrieveCustomer", notes = "", response = Customer.class, responseContainer = "List", tags={ "customer", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok", response = Customer.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Bad Request", response = Error.class),
        @ApiResponse(code = 404, message = "Not Found", response = Error.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = Error.class) })
    @RequestMapping(value = "/customer/{id}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<List<Customer>> retrieveCustomer(@ApiParam(value = "Identifier of the Customer",required=true) @PathVariable("id") String id);


    @ApiOperation(value = "Updates partially a 'Customer' by Id", nickname = "updateCustomer", notes = "", response = Customer.class, tags={ "customer", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Updated", response = Customer.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Error.class),
        @ApiResponse(code = 404, message = "Not Found", response = Error.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = Error.class) })
    @RequestMapping(value = "/customer/{id}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PATCH)
    ResponseEntity<Customer> updateCustomer(@ApiParam(value = "Identifier of the Customer",required=true) @PathVariable("id") String id,@ApiParam(value = "The Customer to be updated" ,required=true )  @Valid @RequestBody CustomerUpdate customer);

}
